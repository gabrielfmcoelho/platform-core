basePath: /
definitions:
  domain.CreateUser:
    properties:
      access:
        type: integer
      email:
        type: string
      password:
        type: string
    required:
    - access
    - email
    - password
    type: object
  domain.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  domain.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.LoginResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  domain.PublicUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      organization_id:
        type: integer
      organization_name:
        type: string
      role_id:
        type: integer
    type: object
  domain.RefreshTokenResponse:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  domain.SuccessResponse:
    properties:
      data:
        description: Omits Data field if nil
      message:
        type: string
      status:
        type: string
    type: object
  domain.User:
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: 127.0.0.1:8080
info:
  contact:
    email: suporte@solude.tech
    name: Eng. Gabriel Coelho | InovaData development team
    url: https://solude.tech
  description: Platform API is a RESTful API for managing ...
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Platform API
  version: 0.1.1
paths:
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Sends an email to the user with a link to reset their password
      operationId: forgotPassword
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            $ref: '#/definitions/domain.SuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Forgot Password
      tags:
      - Auth User
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using their email and password, then returns
        access and refresh tokens for session management.
      operationId: login
      parameters:
      - description: Login Request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login, returns access and refresh tokens
          schema:
            $ref: '#/definitions/domain.LoginResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized - Incorrect email or password
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Login user
      tags:
      - Auth User
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the user's access token
      operationId: refreshToken
      parameters:
      - description: Refresh token
        in: query
        name: refreshToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Access token refreshed successfully
          schema:
            $ref: '#/definitions/domain.RefreshTokenResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "401":
          description: Unauthorized - Invalid refresh token
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Refresh Token
      tags:
      - Auth User
  /reset-password:
    post:
      consumes:
      - application/json
      description: Resets the user's password
      operationId: resetPassword
      parameters:
      - description: User email
        in: query
        name: email
        required: true
        type: string
      - description: New password
        in: query
        name: newPassword
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/domain.SuccessResponse'
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Reset Password
      tags:
      - Auth User
  /user/{id}:
    delete:
      description: Delete user by ID
      operationId: deleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted successfully
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Delete user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user by ID
      operationId: updateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Update user
      tags:
      - User
  /user/{identifier}:
    get:
      description: Get user by ID or email
      operationId: getUser
      parameters:
      - description: User ID or email
        in: path
        name: identifier
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User object
          schema:
            $ref: '#/definitions/domain.PublicUser'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get user by ID or email
      tags:
      - User
  /user/create:
    post:
      consumes:
      - application/json
      description: Create a new user account with the input payload
      operationId: createUser
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
        "400":
          description: Bad Request - Invalid input
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Create a new user account
      tags:
      - User
  /users:
    get:
      description: Get all users from the database
      operationId: fetchUsers
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/domain.PublicUser'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/domain.ErrorResponse'
      summary: Get all users
      tags:
      - User
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
